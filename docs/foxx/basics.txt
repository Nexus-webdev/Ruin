# This is a comment;
# End all statements with a semicolon, or you're going to be in deep shit;

# Use 'let' or 'const' to declare variables (don\'t use 'const' in listeners, it\'s buggy as hell);
# Object literals such as these are called 'scopes';
# Scopes are blocks of code that return an object;
const math = f{
 # Function declaration is as in Js;
 function sqr(num) {
  return num **2;
 };

 function sqrt(num) {
  return num **.5;
 };
};

# Show a popup on the screen;
const answer = '7 Squared is: ' ++f{math:sqr 7};
popup:show 'seven-sqrd' >> answer;
print answer;

# The DOM can be written to using doc:write (functions from objects can be called using ':' instead of '.');
doc:write <p>This is a Paragraph</p>;

const stats = f{
 let base = 10;
 function boost(x) {
  return stats.base +x;
 };
};

# Foxx also supports inline function evaluation using the '+f{}' formatting tool;
# These are used when passing a function call as a function argument, or in expressions such as: +f{math:sqr 3} +1;
const boosted_base = stats:boost +f{math:sqr 2};
print 'Boosted Base Value: ' +boosted_base;
