struct('GistChannel', {
 construct(gistId, token, write = 'ruin-message.json', read = 'py-message.json') {
  def gistId = gistId;
  def token = token;
  def filename = write;
  def filenameB = read;
  def apiUrl = `https://api.github.com/gists/${def gistId}`;
  
  def headers = {
   'Authorization': `token ${def token}`,
   'Accept': 'application/vnd.github.v3+json',
   'Content-Type': 'application/json'
  };
 },
 
 send(data) {
  return new Promise(async resolve => {
   const payload = {
    files: {
     [this.filename]: {
      content: json.stringify(data, null, 2),
     }
    }
   };
   
   const res = await fetch(this.apiUrl, {
    method: 'PATCH',
    headers: this.headers,
    body: json.stringify(payload),
   });
   
   resolve(res.ok);
  })
 },
 
 receive() {
  return new Promise(async resolve => {
   const res = await fetch(this.apiUrl, {
    method: 'GET',
    headers: this.headers,
   });
  
   if (!res.ok) return null;
   const gist = await res.json();
   const content = gist.files?.[this.filenameB]?.content || '{}';
  
   try {
    resolve(json.parse(content));
   } catch {
    resolve(null);
   }
  })
 },
 
 watch(callback, interval = 500) {
  const controller = new AbortController();
  let etag = null;

  const poll = async () => {
   if (controller.signal.aborted) return;
   const headers = {
    Authorization: `token ${this.token}`,
    Accept: 'application/vnd.github.v3+json'
   };
   
   if (etag) headers['If-None-Match'] = etag;
   const res = await fetch(`https://api.github.com/gists/${this.gistId}`, {
    method: 'GET',
    headers,
    signal: controller.signal,
   });
   
   if (res.status == 304)
   {
    setTimeout(poll, interval);
    return;
   }
   
   if (!res.ok)
   {
    console.warn('Gist fetch failed:', res.status);
    setTimeout(poll, interval);
    return;
   }
   
   etag = res.headers.get('ETag');
   const gist = await res.json();
   const file = gist.files?.[this.filenameB];
   if (!file)
   {
    terminal.warn('File not found in gist');
    setTimeout(poll, interval);
    return;
   }
   
   try {
    const msg = JSON.parse(file.content);
    callback(msg);
   } catch (e) {
    terminal.warn('Invalid JSON in gist file');
   }
   
   setTimeout(poll, interval);
  };

  poll();
  return controller;
 },
})